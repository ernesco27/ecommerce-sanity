/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type CompanySettings = {
  _id: string;
  _type: "companySettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  businessName?: string;
  legalName?: string;
  taxId?: string;
  email?: string;
  phone?: string;
  alternativePhone?: string;
  address?: {
    street?: string;
    city?: string;
    state?: string;
    postalCode?: string;
    country?: string;
  };
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  favicon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  brandColors?: {
    primary?: string;
    secondary?: string;
  };
  socialMedia?: {
    facebook?: string;
    instagram?: string;
    twitter?: string;
    linkedin?: string;
    youtube?: string;
  };
  businessHours?: {
    weekday?: string;
    weekend?: string;
    holidays?: string;
    timeZone?: string;
  };
  currency?: string;
  languages?: Array<string>;
  metaDescription?: string;
};

export type Analytics = {
  _id: string;
  _type: "analytics";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  date?: string;
  pageViews?: Array<{
    timestamp?: string;
    pageUrl?: string;
    pageType?: string;
    duration?: number;
    referrer?: string;
    user?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    _key: string;
  }>;
  productViews?: Array<{
    timestamp?: string;
    duration?: number;
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    user?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    _key: string;
  }>;
  userActions?: Array<{
    timestamp?: string;
    action?: string;
    entityType?: string;
    entityId?: string;
    details?: {
      value?: number;
      currency?: string;
      quantity?: number;
      variant?: string;
      source?: string;
      metadata?: {
        browser?: string;
        device?: string;
        platform?: string;
      };
    };
    user?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    _key: string;
  }>;
  salesMetrics?: {
    totalSales?: number;
    orderCount?: number;
    averageOrderValue?: number;
    topSellingProducts?: Array<{
      product?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "product";
      };
      quantity?: number;
      revenue?: number;
      _key: string;
    }>;
  };
  userMetrics?: {
    newUsers?: number;
    activeUsers?: number;
    conversionRate?: number;
    userEngagement?: {
      productViews?: number;
      addToCart?: number;
      wishlistAdds?: number;
      reviews?: number;
      averageSessionDuration?: number;
      bounceRate?: number;
    };
  };
  inventoryMetrics?: {
    totalStock?: number;
    lowStockItems?: number;
    outOfStockItems?: number;
    stockTurnoverRate?: number;
    stockMovements?: {
      totalIn?: number;
      totalOut?: number;
      orderFulfillments?: number;
      returns?: number;
      adjustments?: number;
    };
    topMovers?: Array<{
      product?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "product";
      };
      quantityMoved?: number;
      revenue?: number;
      movement?: "high_sales" | "low_sales" | "no_movement";
      _key: string;
    }>;
    warehouseBreakdown?: Array<{
      warehouse?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "warehouse";
      };
      totalStock?: number;
      stockValue?: number;
      utilization?: number;
      _key: string;
    }>;
    alerts?: Array<{
      type?: "low_stock" | "out_of_stock" | "overstock" | "expiring_soon";
      product?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "product";
      };
      message?: string;
      severity?: "low" | "medium" | "high";
      _key: string;
    }>;
    recommendations?: Array<{
      type?: "restock" | "reduce_stock" | "relocate" | "review_pricing";
      product?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "product";
      };
      suggestion?: string;
      potentialImpact?: "low" | "medium" | "high";
      _key: string;
    }>;
  };
  marketingMetrics?: {
    campaignPerformance?: Array<{
      campaignName?: string;
      clicks?: number;
      conversions?: number;
      revenue?: number;
      _key: string;
    }>;
    discountUsage?: Array<{
      discount?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "discount";
      };
      usageCount?: number;
      revenue?: number;
      _key: string;
    }>;
  };
  customerServiceMetrics?: {
    returns?: number;
    refunds?: number;
    customerSatisfaction?: number;
    supportTickets?: number;
  };
};

export type AuditLog = {
  _id: string;
  _type: "auditLog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  timestamp?: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  action?:
    | "create"
    | "update"
    | "delete"
    | "login"
    | "logout"
    | "export"
    | "import"
    | "permission_change"
    | "stock_adjustment"
    | "stock_order_fulfillment"
    | "stock_return"
    | "stock_count";
  entityType?:
    | "product"
    | "order"
    | "user"
    | "inventory"
    | "category"
    | "discount"
    | "role"
    | "system";
  entityId?: string;
  details?: {
    previousValue?: string;
    newValue?: string;
    reason?: string;
    relatedOrder?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "order";
    };
  };
  ipAddress?: string;
  userAgent?: string;
  status?: "success" | "failed" | "warning";
  notes?: string;
};

export type Inventory = {
  _id: string;
  _type: "inventory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  variant?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productVariant";
  };
  warehouse?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "warehouse";
  };
  quantity?: number;
  minStockLevel?: number;
  maxStockLevel?: number;
  reorderPoint?: number;
  reorderQuantity?: number;
  stockStatus?:
    | "in_stock"
    | "low_stock"
    | "out_of_stock"
    | "discontinued"
    | "on_order";
  lastStockCheck?: string;
  stockMovements?: Array<{
    date?: string;
    type?:
      | "stock_in"
      | "stock_out"
      | "order_fulfillment"
      | "order_return"
      | "adjustment"
      | "damage";
    quantity?: number;
    order?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "order";
    };
    reference?: string;
    notes?: string;
    performedBy?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    _key: string;
  }>;
  notes?: string;
};

export type Warehouse = {
  _id: string;
  _type: "warehouse";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  code?: string;
  address?: {
    street?: string;
    city?: string;
    state?: string;
    postalCode?: string;
    country?: string;
  };
  contact?: {
    name?: string;
    phone?: string;
    email?: string;
  };
  isActive?: boolean;
  storageCapacity?: {
    totalArea?: number;
    usableArea?: number;
    temperatureControlled?: boolean;
    hazmatCertified?: boolean;
  };
  operatingHours?: {
    weekday?: string;
    weekend?: string;
    holidays?: string;
  };
  shippingZones?: Array<{
    zoneName?: string;
    countries?: Array<string>;
    estimatedDelivery?: string;
    _key: string;
  }>;
  notes?: string;
};

export type Role = {
  _id: string;
  _type: "role";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  code?: string;
  description?: string;
  permissions?: {
    products?: {
      create?: boolean;
      read?: boolean;
      update?: boolean;
      delete?: boolean;
      publish?: boolean;
    };
    orders?: {
      view?: boolean;
      process?: boolean;
      refund?: boolean;
      cancel?: boolean;
    };
    users?: {
      create?: boolean;
      read?: boolean;
      update?: boolean;
      delete?: boolean;
    };
    discounts?: {
      create?: boolean;
      read?: boolean;
      update?: boolean;
      delete?: boolean;
    };
    content?: {
      manage_pages?: boolean;
      manage_banners?: boolean;
      manage_categories?: boolean;
    };
    reports?: {
      view_sales?: boolean;
      view_inventory?: boolean;
      view_customers?: boolean;
      export_data?: boolean;
    };
  };
  isActive?: boolean;
};

export type Banner = {
  _id: string;
  _type: "banner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subTitle?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  slug?: Slug;
  link?: string;
  buttonText?: string;
  displayOrder?: number;
  isActive?: boolean;
  startDate?: string;
  endDate?: string;
  bannerType?: "hero" | "promo" | "category" | "sale";
  textColor?: string;
  backgroundColor?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  pageType?:
    | "about"
    | "contact"
    | "terms"
    | "privacy"
    | "shipping"
    | "return"
    | "faq"
    | "custom";
  content?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  >;
  sections?: Array<{
    sectionTitle?: string;
    sectionContent?: Array<
      | {
          children?: Array<{
            marks?: Array<string>;
            text?: string;
            _type: "span";
            _key: string;
          }>;
          style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
          listItem?: "bullet";
          markDefs?: Array<{
            href?: string;
            _type: "link";
            _key: string;
          }>;
          level?: number;
          _type: "block";
          _key: string;
        }
      | {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          media?: unknown;
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          alt?: string;
          _type: "image";
          _key: string;
        }
    >;
    _key: string;
  }>;
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
    keywords?: Array<string>;
  };
  lastUpdated?: string;
  isPublished?: boolean;
};

export type Cart = {
  _id: string;
  _type: "cart";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  items?: Array<{
    product?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "product";
    };
    productVariant?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "productVariant";
    };
    quantity?: number;
    _key: string;
  }>;
  subtotal?: number;
  appliedDiscounts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "discount";
  }>;
  lastUpdated?: string;
  status?: "active" | "abandoned" | "converted";
};

export type OrderItem = {
  _id: string;
  _type: "orderItem";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  productVariant?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productVariant";
  };
  quantity?: number;
  price?: number;
  totalPrice?: number;
  appliedDiscount?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "discount";
  };
};

export type Order = {
  _id: string;
  _type: "order";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  orderNumber?: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  items?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "orderItem";
  }>;
  totalAmount?: number;
  status?: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
  shippingAddress?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "address";
  };
  billingAddress?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "address";
  };
  paymentInfo?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "payment";
  };
  shippingMethod?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "shippingMethod";
  };
  orderNotes?: string;
  createdAt?: string;
  updatedAt?: string;
};

export type ShippingMethod = {
  _id: string;
  _type: "shippingMethod";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  price?: number;
  estimatedDays?: number;
  isAvailable?: boolean;
  restrictions?: Array<string>;
  countries?: Array<string>;
};

export type Payment = {
  _id: string;
  _type: "payment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  paymentMethod?: "credit_card" | "paypal" | "bank_transfer" | "cod";
  amount?: number;
  currency?: string;
  status?: "pending" | "completed" | "failed" | "refunded";
  transactionId?: string;
  paymentDate?: string;
  notes?: string;
};

export type Address = {
  _id: string;
  _type: "address";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  addressType?: "shipping" | "billing" | "both";
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  fullName?: string;
  addressLine1?: string;
  addressLine2?: string;
  city?: string;
  state?: string;
  postalCode?: string;
  country?: string;
  phone?: string;
  isDefault?: boolean;
};

export type RelatedProduct = {
  _id: string;
  _type: "relatedProduct";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  link?: string;
  slug?: Slug;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
};

export type ProductWishlist = {
  _id: string;
  _type: "productWishlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  addedAt?: string;
  notes?: string;
  variant?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productVariant";
  };
  notifyWhenAvailable?: boolean;
  notifyOnPriceChange?: boolean;
};

export type ReviewImage = {
  _id: string;
  _type: "reviewImage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  altText?: Array<string>;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
};

export type ProductReview = {
  _id: string;
  _type: "productReview";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  reviewTitle?: string;
  rating?: number;
  reviewDetails?: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  productVariant?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productVariant";
  };
  verifiedPurchase?: boolean;
  images?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "reviewImage";
  }>;
  helpfulVotes?: number;
  status?: "pending" | "approved" | "rejected";
  reviewDate?: string;
  lastModified?: string;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  phone?: string;
  photo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  accountStatus?: "active" | "inactive" | "suspended" | "pending";
  accountType?: "regular" | "premium" | "business";
  dateJoined?: string;
  lastLogin?: string;
  preferences?: {
    language?: "en" | "es" | "fr";
    currency?: "USD" | "EUR" | "GBP";
    notifications?: {
      email?: boolean;
      sms?: boolean;
      push?: boolean;
    };
  };
  marketingPreferences?: {
    emailMarketing?: boolean;
    smsMarketing?: boolean;
    personalization?: boolean;
    thirdPartySharing?: boolean;
  };
  productReviews?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productReview";
  }>;
  wishlist?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productWishlist";
  }>;
  productLikes?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "product";
  }>;
  roles?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "role";
  }>;
  isEmailVerified?: boolean;
  isMobileVerified?: boolean;
  twoFactorEnabled?: boolean;
  lastPasswordChange?: string;
  loginHistory?: Array<{
    timestamp?: string;
    ipAddress?: string;
    deviceInfo?: string;
    location?: string;
    _key: string;
  }>;
  failedLoginAttempts?: number;
  accountLocked?: boolean;
  lockExpiresAt?: string;
};

export type Discount = {
  _id: string;
  _type: "discount";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  code?: string;
  type?: "percentage" | "amount" | "bxgy" | "free_shipping";
  value?: number;
  minOrderValue?: number;
  maxDiscount?: number;
  startDate?: string;
  endDate?: string;
  isActive?: boolean;
  usageLimit?: {
    totalUses?: number;
    perCustomer?: number;
  };
  applicableTo?: {
    products?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "product";
    }>;
    categories?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "category";
    }>;
    brands?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "brand";
    }>;
  };
  exclusions?: {
    products?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "product";
    }>;
    categories?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "category";
    }>;
    brands?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "brand";
    }>;
  };
};

export type ProductAttribute = {
  _id: string;
  _type: "productAttribute";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  code?: string;
  displayOrder?: number;
  values?: Array<{
    value?: string;
    displayName?: string;
    metadata?: {
      hexColor?: Color;
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
    };
    _key: string;
  }>;
};

export type ProductVariant = {
  _id: string;
  _type: "productVariant";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  size?: "S" | "M" | "L" | "XL" | "2XL";
  price?: number;
  compareAtPrice?: number;
  colorVariants?: Array<{
    color?:
      | "red"
      | "green"
      | "blue"
      | "black"
      | "white"
      | "gray"
      | "navy"
      | "brown";
    colorCode?: Color;
    stock?: number;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
    _type: "colorVariant";
    _key: string;
  }>;
  sku?: string;
  barcode?: string;
  dimensions?: {
    weight?: number;
    length?: number;
    width?: number;
    height?: number;
  };
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  status?: "draft" | "active" | "discontinued" | "scheduled";
  materialType?: string;
  visibility?: {
    isVisible?: boolean;
    publishDate?: string;
    unpublishDate?: string;
  };
  featured?: boolean;
  description?: string;
  fullDescription?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  images?: {
    primary?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    gallery?: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }>;
  };
  variants?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productVariant";
  }>;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  subcategory?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "subcategory";
  }>;
  brand?: {
    _id: string;
    name?: string;
    slug?: Slug;
  };
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
    keywords?: Array<string>;
    canonicalUrl?: string;
  };
  taxInfo?: {
    taxCategory?: "standard" | "reduced" | "zero" | "exempt";
    taxRate?: number;
    hsnCode?: string;
  };
  reviews?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "productReview";
  }>;
  relatedProducts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "product";
  }>;
  stockSummary?: {
    totalStock?: number;
    lowStockVariants?: number;
    outOfStockVariants?: number;
    lastUpdated?: string;
  };
};

export type Brand = {
  _id: string;
  _type: "brand";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  description?: string;
  website?: string;
  founded?: string;
  country?: string;
  featured?: boolean;
  status?: "active" | "inactive";
  socialMedia?: {
    facebook?: string;
    instagram?: string;
    twitter?: string;
    linkedin?: string;
  };
};

export type Subcategory = {
  _id: string;
  _type: "subcategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  parentCategory?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  displayOrder?: number;
  isActive?: boolean;
  featured?: boolean;
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
    keywords?: Array<string>;
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  subcategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "subcategory";
  }>;
  displayOrder?: number;
  isActive?: boolean;
  featured?: boolean;
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
    keywords?: Array<string>;
  };
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }
>;

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | CompanySettings
  | Analytics
  | AuditLog
  | Inventory
  | Warehouse
  | Role
  | Banner
  | Page
  | Cart
  | OrderItem
  | Order
  | ShippingMethod
  | Payment
  | Address
  | RelatedProduct
  | ProductWishlist
  | ReviewImage
  | ProductReview
  | User
  | Discount
  | ProductAttribute
  | ProductVariant
  | Product
  | Brand
  | Subcategory
  | Category
  | Slug
  | BlockContent
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/app/api/products/[id]/route.ts
// Variable: query
// Query: *[_type == "product" && _id == $id][0] {      _id,      _createdAt,      name,      "slug": slug.current,      description,      fullDescription,      status,      visibility {        isVisible,        publishDate,        unpublishDate      },      "category": category->{         _id,         title,         "slug": slug.current      },      "subcategories": subcategory[]->{         _id,         name,         "slug": slug.current,\n        "parentCategory": parentCategory->{           _id,          title,          "slug": slug.current        }      },      "brand": brand->{         _id,         name,         "slug": slug.current       },      "images": {        "primary": images.primary{          "url": asset->url,          "alt": alt,          "lqip": asset->metadata.lqip,          "dimensions": asset->metadata.dimensions        },        "gallery": images.gallery[]{          "url": asset->url,          "alt": alt,          "lqip": asset->metadata.lqip,          "dimensions": asset->metadata.dimensions        }      },      "variants": variants[]->{         _id,        size,        price,        compareAtPrice,        sku,        colorVariants[] {          color,          colorCode,          stock,          "images": images[]{            "url": asset->url,            "alt": alt,            "lqip": asset->metadata.lqip,            "dimensions": asset->metadata.dimensions          }        }      },      "reviews": reviews[]->{         _id,        rating,        title,        comment,        author,        verifiedPurchase,        createdAt,        helpful      },      seo {        metaTitle,        metaDescription,        keywords,        canonicalUrl      },      taxInfo {        taxCategory,        taxRate,        hsnCode      },      "relatedProducts": relatedProducts[]->{         _id,        name,        "slug": slug.current,\n        "primaryImage": images.primary{          "url": asset->url,          alt,          "lqip": asset->metadata.lqip        },        "pricing": {          "min": coalesce((variants[]->price)[0], 0),          "max": coalesce((variants[]->price)[-1], 0)        }      }    }
export type QueryResult = {
  _id: string;
  _createdAt: string;
  name: string | null;
  slug: string | null;
  description: string | null;
  fullDescription: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  status: "active" | "discontinued" | "draft" | "scheduled" | null;
  visibility: {
    isVisible: boolean | null;
    publishDate: string | null;
    unpublishDate: string | null;
  } | null;
  category: {
    _id: string;
    title: string | null;
    slug: string | null;
  } | null;
  subcategories: Array<{
    _id: string;
    name: string | null;
    slug: string | null;
    parentCategory: {
      _id: string;
      title: string | null;
      slug: string | null;
    } | null;
  }> | null;
  brand: {
    _id: string;
    name: string | null;
    slug: string | null;
  } | null;
  images: {
    primary: {
      url: string | null;
      alt: string | null;
      lqip: string | null;
      dimensions: SanityImageDimensions | null;
    } | null;
    gallery: Array<{
      url: string | null;
      alt: string | null;
      lqip: string | null;
      dimensions: SanityImageDimensions | null;
    }> | null;
  };
  variants: Array<{
    _id: string;
    size: "2XL" | "L" | "M" | "S" | "XL" | null;
    price: number | null;
    compareAtPrice: number | null;
    sku: string | null;
    colorVariants: Array<{
      color:
        | "black"
        | "blue"
        | "brown"
        | "gray"
        | "green"
        | "navy"
        | "red"
        | "white"
        | null;
      colorCode: Color | null;
      stock: number | null;
      images: Array<{
        url: string | null;
        alt: string | null;
        lqip: string | null;
        dimensions: SanityImageDimensions | null;
      }> | null;
    }> | null;
  }> | null;
  reviews: Array<{
    _id: string;
    rating: number | null;
    title: null;
    comment: null;
    author: null;
    verifiedPurchase: boolean | null;
    createdAt: null;
    helpful: null;
  }> | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
    keywords: Array<string> | null;
    canonicalUrl: string | null;
  } | null;
  taxInfo: {
    taxCategory: "exempt" | "reduced" | "standard" | "zero" | null;
    taxRate: number | null;
    hsnCode: string | null;
  } | null;
  relatedProducts: Array<{
    _id: string;
    name: string | null;
    slug: string | null;
    primaryImage: {
      url: string | null;
      alt: string | null;
      lqip: string | null;
    } | null;
    pricing: {
      min: number | 0;
      max: number | 0;
    };
  }> | null;
} | null;

// Source: ./src/app/api/products/route.ts
// Variable: productsQuery
// Query: *[_type == "product"] {  _id,  _createdAt,  name,  "slug": slug.current,  description,  fullDescription,  status,  featured,  visibility {    isVisible,    publishDate,    unpublishDate  },  "category": category->{    _id,    title,    "slug": slug.current  },  "subcategories": subcategory[]->{    _id,    name,    "slug": slug.current,\n    "parentCategory": parentCategory->{      _id,      title    }  },  "brand": brand->{    _id,    name,    "slug": slug.current  },  "images": {    "primary": images.primary{      "url": asset->url,      alt,\n      "lqip": asset->metadata.lqip,      "dimensions": asset->metadata.dimensions    },    "gallery": images.gallery[]{      "url": asset->url,      alt,\n      "lqip": asset->metadata.lqip,      "dimensions": asset->metadata.dimensions    }  },  "variants": variants[]->{    _id,    size,    price,    compareAtPrice,    sku,    colorVariants[] {      color,      colorCode,      stock,      "images": images[]{        "url": asset->url,        alt,\n        "lqip": asset->metadata.lqip,        "dimensions": asset->metadata.dimensions      }    }  },  "pricing": {    "min": coalesce((variants[]->price)[0], 0),    "max": coalesce((variants[]->price)[-1], 0)  },  "reviews": reviews[]->{    _id,    rating,    title,    comment,    author,    verifiedPurchase,    createdAt,    helpful  },  "relatedProducts": relatedProducts[]->{     _id,    name,    "slug": slug.current,\n    "primaryImage": images.primary{      "url": asset->url,      alt,\n      "lqip": asset->metadata.lqip    }  }} | order(coalesce((variants[]->price)[0], 0) asc)
export type ProductsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  name: string | null;
  slug: string | null;
  description: string | null;
  fullDescription: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<{
          href?: string;
          _type: "link";
          _key: string;
        }>;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
        _key: string;
      }
  > | null;
  status: "active" | "discontinued" | "draft" | "scheduled" | null;
  featured: boolean | null;
  visibility: {
    isVisible: boolean | null;
    publishDate: string | null;
    unpublishDate: string | null;
  } | null;
  category: {
    _id: string;
    title: string | null;
    slug: string | null;
  } | null;
  subcategories: Array<{
    _id: string;
    name: string | null;
    slug: string | null;
    parentCategory: {
      _id: string;
      title: string | null;
    } | null;
  }> | null;
  brand: {
    _id: string;
    name: string | null;
    slug: string | null;
  } | null;
  images: {
    primary: {
      url: string | null;
      alt: string | null;
      lqip: string | null;
      dimensions: SanityImageDimensions | null;
    } | null;
    gallery: Array<{
      url: string | null;
      alt: string | null;
      lqip: string | null;
      dimensions: SanityImageDimensions | null;
    }> | null;
  };
  variants: Array<{
    _id: string;
    size: "2XL" | "L" | "M" | "S" | "XL" | null;
    price: number | null;
    compareAtPrice: number | null;
    sku: string | null;
    colorVariants: Array<{
      color:
        | "black"
        | "blue"
        | "brown"
        | "gray"
        | "green"
        | "navy"
        | "red"
        | "white"
        | null;
      colorCode: Color | null;
      stock: number | null;
      images: Array<{
        url: string | null;
        alt: string | null;
        lqip: string | null;
        dimensions: SanityImageDimensions | null;
      }> | null;
    }> | null;
  }> | null;
  pricing: {
    min: number | 0;
    max: number | 0;
  };
  reviews: Array<{
    _id: string;
    rating: number | null;
    title: null;
    comment: null;
    author: null;
    verifiedPurchase: boolean | null;
    createdAt: null;
    helpful: null;
  }> | null;
  relatedProducts: Array<{
    _id: string;
    name: string | null;
    slug: string | null;
    primaryImage: {
      url: string | null;
      alt: string | null;
      lqip: string | null;
    } | null;
  }> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "product" && _id == $id][0] {\n      _id,\n      _createdAt,\n      name,\n      "slug": slug.current,\n      description,\n      fullDescription,\n      status,\n      visibility {\n        isVisible,\n        publishDate,\n        unpublishDate\n      },\n      "category": category->{ \n        _id, \n        title, \n        "slug": slug.current\n      },\n      "subcategories": subcategory[]->{ \n        _id, \n        name, \n        "slug": slug.current,\n        "parentCategory": parentCategory->{ \n          _id,\n          title,\n          "slug": slug.current\n        }\n      },\n      "brand": brand->{ \n        _id, \n        name, \n        "slug": slug.current \n      },\n      "images": {\n        "primary": images.primary{\n          "url": asset->url,\n          "alt": alt,\n          "lqip": asset->metadata.lqip,\n          "dimensions": asset->metadata.dimensions\n        },\n        "gallery": images.gallery[]{\n          "url": asset->url,\n          "alt": alt,\n          "lqip": asset->metadata.lqip,\n          "dimensions": asset->metadata.dimensions\n        }\n      },\n      "variants": variants[]->{ \n        _id,\n        size,\n        price,\n        compareAtPrice,\n        sku,\n        colorVariants[] {\n          color,\n          colorCode,\n          stock,\n          "images": images[]{\n            "url": asset->url,\n            "alt": alt,\n            "lqip": asset->metadata.lqip,\n            "dimensions": asset->metadata.dimensions\n          }\n        }\n      },\n      "reviews": reviews[]->{ \n        _id,\n        rating,\n        title,\n        comment,\n        author,\n        verifiedPurchase,\n        createdAt,\n        helpful\n      },\n      seo {\n        metaTitle,\n        metaDescription,\n        keywords,\n        canonicalUrl\n      },\n      taxInfo {\n        taxCategory,\n        taxRate,\n        hsnCode\n      },\n      "relatedProducts": relatedProducts[]->{ \n        _id,\n        name,\n        "slug": slug.current,\n        "primaryImage": images.primary{\n          "url": asset->url,\n          alt,\n          "lqip": asset->metadata.lqip\n        },\n        "pricing": {\n          "min": coalesce((variants[]->price)[0], 0),\n          "max": coalesce((variants[]->price)[-1], 0)\n        }\n      }\n    }': QueryResult;
    '*[_type == "product"] {\n  _id,\n  _createdAt,\n  name,\n  "slug": slug.current,\n  description,\n  fullDescription,\n  status,\n  featured,\n  visibility {\n    isVisible,\n    publishDate,\n    unpublishDate\n  },\n  "category": category->{\n    _id,\n    title,\n    "slug": slug.current\n  },\n  "subcategories": subcategory[]->{\n    _id,\n    name,\n    "slug": slug.current,\n    "parentCategory": parentCategory->{\n      _id,\n      title\n    }\n  },\n  "brand": brand->{\n    _id,\n    name,\n    "slug": slug.current\n  },\n  "images": {\n    "primary": images.primary{\n      "url": asset->url,\n      alt,\n      "lqip": asset->metadata.lqip,\n      "dimensions": asset->metadata.dimensions\n    },\n    "gallery": images.gallery[]{\n      "url": asset->url,\n      alt,\n      "lqip": asset->metadata.lqip,\n      "dimensions": asset->metadata.dimensions\n    }\n  },\n  "variants": variants[]->{\n    _id,\n    size,\n    price,\n    compareAtPrice,\n    sku,\n    colorVariants[] {\n      color,\n      colorCode,\n      stock,\n      "images": images[]{\n        "url": asset->url,\n        alt,\n        "lqip": asset->metadata.lqip,\n        "dimensions": asset->metadata.dimensions\n      }\n    }\n  },\n  "pricing": {\n    "min": coalesce((variants[]->price)[0], 0),\n    "max": coalesce((variants[]->price)[-1], 0)\n  },\n  "reviews": reviews[]->{\n    _id,\n    rating,\n    title,\n    comment,\n    author,\n    verifiedPurchase,\n    createdAt,\n    helpful\n  },\n  "relatedProducts": relatedProducts[]->{ \n    _id,\n    name,\n    "slug": slug.current,\n    "primaryImage": images.primary{\n      "url": asset->url,\n      alt,\n      "lqip": asset->metadata.lqip\n    }\n  }\n} | order(coalesce((variants[]->price)[0], 0) asc)': ProductsQueryResult;
  }
}
